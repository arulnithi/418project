//Function foo parsed from ast_test.py

#include <stdio.h>
#include <math.h>
#include <stdlib.h>

#define pi 3.14159265

__global__ void foo(float* brg1,float* arg2) {
    if (threadIdx.x > 5) {
        return;
    }
    for (int x=0;x<1; x+= 1) {
            for (int y=0; y<100; y+= 1) {
                brg1[threadIdx.x]=arg2[threadIdx.x]+1;
            }
    }
}

int main() {
    printf("STARTING MAIN FUNCTION\n");
    
    //Define constants to use
    const int N = 5;
    const int blocksize = 5;
    
    //Allocate the variables
    float brg1 [5]={1, 2, 3, 4, 5};
    float* arg2=(float*)malloc(5*sizeof(float));
    
    //Declare and allocate the variables and copy it over to device
    float *brg1Cuda;
    const int csize = N*sizeof(float);
    cudaMalloc( (void**)&brg1Cuda, csize );
    cudaMemcpy( brg1Cuda, brg1, csize, cudaMemcpyHostToDevice );
    
    //Setup variables for cuda block and grid and then call function
    dim3 dimBlock( blocksize, 1 );
    dim3 dimGrid( 1, 1 );
    foo<<<dimGrid, dimBlock>>>(brg1Cuda,arg2);
    
    //Free allocated memory
    cudaFree( brg1Cuda );
    free (arg2);
    return 0;
}
